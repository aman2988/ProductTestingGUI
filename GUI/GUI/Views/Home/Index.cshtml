@model DashboardViewModel
@{
    ViewData["Title"] = "Home Page";
}

<style type="text/css">
    .btn-primary {
        color: #fff;
        background-color: #3B5998 !important;
        border-color: #1861ac;
    }

    /* width */
    ::-webkit-scrollbar {
        width: 5px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: #888;
    }

        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

    .fn-white {
        color: #fff;
    }

</style>
<!-- /.row-->
<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">Product</div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        @Html.DropDownList("ddlProducts", new SelectList(Model.Products,"Id","ProductName"), "- Select Product -", new { @class = "form-select"})
                    </div>
                    <div class="col-6">
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="inputGroup-sizing-default">P/N</span>
                            <input type="text" id="pn" name="pn" style="pointer-events:none;" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                        </div>
                    </div>
                </div>
                <!-- /.row--><br>
                <div id="testListResult"></div>
                <br />
                <div class="card mb-4">
                    <div class="card-header">Full Test <span style="float:right;">  Counter: <span id="stopwatch">0</span> Sec </span></div>
                    <div class="card-body">
                        <div class="row" style="padding:20px 10px;">

                            <br />
                            <div class="d-grid gap-2 col-6 mx-auto">
                                <button id="btnGlobalStart" class="btn btn-success fn-white" type="button">START</button>
                            </div>
                            <div class="d-grid gap-2 col-6 mx-auto">
                                <button id="btnGlobalStop" class="btn btn-danger fn-white" type="button">STOP</button>
                            </div>
                            <br />
                            @* <span style="color:red;margin-top:10px;">Error Message</span>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.col-->
    <div class="col-md-4">
        <div class="">
            <div class="card mb-4" style="--cui-card-cap-bg: #3b5998">
                <div class="card-header position-relative d-flex justify-content-center align-items-center">
                    <svg class="icon icon-3xl text-white my-4">
                        <use xlink:href="/vendors/coreui/icons/svg/free.svg#cil-print"></use>
                    </svg>
                    <div class="chart-wrapper position-absolute top-0 start-0 w-100 h-100">
                        <canvas id="social-box-chart-1" height="90"></canvas>
                    </div>
                </div>
                <div class="card-body row text-center">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="inputGroup-sizing-default">IP Address</span>
                        <input type="text" id="ip" name="ip" value=@(Model.PrinterSettings != null ? Model.PrinterSettings.Ipaddress : "") class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="inputGroup-sizing-default">Port</span>
                        <input type="text" id="port" name="port" value=@(Model.PrinterSettings != null ? Model.PrinterSettings.Port : "") class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default">
                    </div>
                    <div class="mb-3" style="text-align:right;">
                        <button id="savePrinter" type="button" class="btn btn-primary">Save</button>
                    </div>
                    <div class="mb-3" style="text-align:left;">
                        <button type="button" id="btnPrint" disabled="disabled" class="btn btn-outline-primary">Print</button>
                        <button type="button" id="btnAdmin" class="btn btn-outline-primary">Admin</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /.row-->
@section Scripts
    {
    <script type="text/javascript">
        function filterItems(items, searchVal) {
            return items.filter((item) => Object.values(item).includes(searchVal));
        }

        function getIdentifier(idAttr) {
            var pId = idAttr.split("-")[1];
            var tId = idAttr.split("-")[2];
            return "-" + pId + "-" + tId;
        }

        function saveLogs(pId, t) {
            var model = {
                fullLog: logList,
                totalTime: t,
                productId: pId
            };
            console.log('Saving test log');
            $.post('Home/SaveTestLogs', model, function () {

            });
        }

        var stopwatch;
        var globalTestStarted = false;
        var logList = [];
        var t = 0;
        var fullTestPass = true;
        async function startGlobalTest(pId, result) {
            logList = [];
            globalTestStarted = true;
            $("#btnPrint").attr("disabled", true);
            ////timer
            t = 0;
            stopwatch = setInterval(function () {
                $('#stopwatch').text(t++);
            }, 1000);
            $('.status').text('');
            $('.progress-bar').removeClass('bg-success').removeClass('bg-danger').hide();
            var i = 0;
            while (i < result.tests.length && globalTestStarted) {
                console.log('Started' + result.tests[i].testName);
                //alert('i:' + i);
                await processIndividualTest(pId, result.tests[i].id, i == 0 ? true : false);
                i++;

                if (i == result.tests.length) { //finish test tasks
                    clearInterval(stopwatch);
                    globalTestStarted = false;
                    console.log(logList);
                    saveLogs(pId, t);

                    if(fullTestPass){
                        $("#btnPrint").attr("disabled", false);
                    }else{
                        $("#btnPrint").attr("disabled", true);
                    }
                }
            }
        }

        function processIndividualTest(pId, tId, appendLine) {
            return new Promise(resolve => {
                //alert('pId:' + pId + '----' + 'tId:' + tId);
                var status = "#status" + "-" + pId + "-" + tId;
                var bar = "#pbar" + "-" + pId + "-" + tId;
                $(status).text('Started');
                $.get('Home/ProcessIndividualTest', { pId: pId, tId: tId, appendLine: appendLine }, function (result) {
                    console.log(result);
                    if (result.success) {
                        $(status).text('Success');
                        $(document).find(bar).show().removeClass('bg-danger').addClass('bg-success');
                    } else {
                        fullTestPass = false;
                        $(status).text('Failed');
                        $(bar).show().removeClass('bg-success').addClass('bg-danger');

                    }
                    if (appendLine)
                        $('#txtLog').prepend(result.message + "\r\n \r\n \r\n");
                    else
                        $('#txtLog').prepend(result.message + "\r\n");

                    logList.push(result.message);
                    inProgress = false;
                    console.log('processIndividualTest: inProgress-' + inProgress);
                    resolve('1');
                });
            });


        }
        var inProgress = false;
        $(document).ready(function () {

            var prods = new Array();
            prods = @Html.Raw(Json.Serialize(@Model.Products));

            ////////////// product combobox change event ///////////
            $('#ddlProducts').change(function () {
                showLoader(true);
                var idd = $(this).val();
                idd = idd == "" ? 0 : idd;

                var found_prod = prods.filter(function (idx) {
                    return idx.id == idd;
                });
                if (!jQuery.isEmptyObject(found_prod)) {
                    $('#pn').val(found_prod[0].pn);
                }
                $.get('/Home/GetDeviceViewById', { Id: $(this).val() }, function (result) {
                    $('#testListResult').html(result);
                    showLoader(false);
                });
            });

            ////////////// save printer button click ///////////
            $('#savePrinter').click(function () {
                showLoader(true);
                $.get('Home/SavePrinter', { ip: $('#ip').val(), port: $('#port').val() }, function (res) {
                    if (res.success == true) {
                        //alert('Saved Successfully.');
                        showLoader(false);
                        let timerInterval;
                        Swal.fire({
                            title: "SUCCESS!",
                            html: "Saved Successfully.",
                            timer: 2000,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading();
                                const timer = Swal.getPopup().querySelector("b");
                                timerInterval = setInterval(() => {
                                    timer.textContent = `${Swal.getTimerLeft()}`;
                                }, 1000);
                            },
                            willClose: () => {
                                clearInterval(timerInterval);
                            }
                        }).then((result) => {
                            /* Read more about handling dismissals below */
                            if (result.dismiss === Swal.DismissReason.timer) {
                                console.log("I was closed by the timer");
                            }
                        });
                    }
                });
            });

            ////////////// admin button click ///////////
            $('#btnAdmin').click(function () {
                //showLoader(true);
                Swal.fire({
                    title: "Please Enter Password",
                    input: "password",
                    inputAttributes: {
                        autocapitalize: "off"
                    },
                    showCancelButton: true,
                    confirmButtonText: "Submit",
                    showLoaderOnConfirm: true,
                    preConfirm: async (login) => {
                        try {
                            showLoader(true);
                            if (login == 12345678) {
                                $("#btnPrint").attr("disabled", false);
                                showLoader(false);
                                Swal.fire({
                                    title: `Print Enabled`,

                                });


                            } else {
                                $("#btnPrint").attr("disabled", true);
                                showLoader(false);
                            }
                        } catch (error) {
                            Swal.showValidationMessage(`
                                                                                Request failed: ${error}
                                                                              `);
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                }).then((result) => {
                    //if (result.isConfirmed) {
                    //    Swal.fire({
                    //        title: `Print Enabled`,

                    //    });
                    //}
                });
            });

            ////////////// individual test button click ///////////
            $(document).on('click', '.btn-itest', function (event) {
                var code = $(this).attr('id');
                var pId = code.split("-")[1];
                var tId = code.split("-")[2];
                var bar = "#pbar" + getIdentifier(code);
                var status = "#status" + getIdentifier(code);
                var chkbox = "#checkbox" + getIdentifier(code);
                $(document).find(bar).show().removeClass('bg-danger').removeClass('bg-success');
                $(status).text('Started');
                $.get('Home/ProcessIndividualTest', { pId: pId, tId: tId }, function (result) {
                    console.log(result);
                    if (result.success) {
                        $(status).text('Success');
                        $(document).find(bar).show().removeClass('bg-danger').addClass('bg-success');
                    } else {
                        $(status).text('Failed');
                        $(bar).show().removeClass('bg-success').addClass('bg-danger');

                    }
                    $(chkbox).trigger('click');
                    $('#txtLog').prepend(result.message + "\r\n \r\n \r\n");
                });
            });

            ////////////// checckbox click ///////////
            $(document).on('change', '.checkbox', function () {
                var chkid = $(this).attr('id');
                var iTestBtnId = '#itest' + getIdentifier(chkid);
                if ($(this).is(':checked')) {
                    $(iTestBtnId).removeClass('btn-outline-primary').addClass('btn-primary').attr("disabled", false);
                } else {
                    $(iTestBtnId).removeClass('btn-primary').addClass('btn-outline-primary').attr("disabled", true);
                }
            });

            ////////////// btn global test start ///////////
            $('#btnGlobalStart').click(function () {
                var pId = $('#ddlProducts').val();
                if (pId > 0) {
                    $.get('Home/GetDeviceById', { Id: pId }, function (result) {
                        startGlobalTest(pId, result);
                    });
                }
                else {
                    Swal.fire({
                        title: "ALERT!",
                        html: "Please Select the Product.",
                        timer: 2000,
                        timerProgressBar: true,
                        didOpen: () => {
                            Swal.showLoading();
                            const timer = Swal.getPopup().querySelector("b");
                            timerInterval = setInterval(() => {
                                timer.textContent = `${Swal.getTimerLeft()}`;
                            }, 1000);
                        },
                        willClose: () => {
                            clearInterval(timerInterval);
                        }
                    });
                }
            });

            ////////////// btn global test stop ///////////
            $('#btnGlobalStop').click(function () {
                if (!globalTestStarted) {
                    Swal.fire({
                        title: "ALERT!",
                        html: "Global Test Not Running.",
                        timer: 2000,
                        timerProgressBar: true,
                        didOpen: () => {
                            Swal.showLoading();
                            const timer = Swal.getPopup().querySelector("b");
                            timerInterval = setInterval(() => {
                                timer.textContent = `${Swal.getTimerLeft()}`;
                            }, 1000);
                        },
                        willClose: () => {
                            clearInterval(timerInterval);
                        }
                    });
                } else {
                    globalTestStarted = false;
                    clearInterval(stopwatch);
                    saveLogs($('#ddlProducts').val(), t);
                    Swal.fire({
                        title: "SUCCESS!",
                        html: "Global Test Stopped.",
                        timer: 2000,
                        timerProgressBar: true,
                        didOpen: () => {
                            Swal.showLoading();
                            const timer = Swal.getPopup().querySelector("b");
                            timerInterval = setInterval(() => {
                                timer.textContent = `${Swal.getTimerLeft()}`;
                            }, 1000);
                        },
                        willClose: () => {
                            clearInterval(timerInterval);
                        }
                    });
                }
            });

            $('#btnPrint').click(function () {
                showLoader(true);
                $.get('Home/Print', function (result) {
                    showLoader(false);
                    Swal.fire({
                        title: result.message
                    });
                });
            });

        });
    </script>
}